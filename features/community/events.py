# NOME DO ARQUIVO: features/community/events.py
# REFACTOR: Gerencia a exibi√ß√£o de eventos e a cria√ß√£o de links para o Google Calendar.

import logging
from datetime import datetime, timedelta
from urllib.parse import quote
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

from utils.verification import group_member_required

logger = logging.getLogger(__name__)

# Os dados dos eventos foram movidos para este arquivo para torn√°-lo autossuficiente.
EVENTOS = {
    "Boa Vista üáßüá∑": {
        "file_id_foto": "AgACAgEAAxkBAAImKGcou0nzeJOY5mCvomwaLphxCV_nAAJJrTEbrGlARajSxbtHP1ucAQADAgADeQADNgQ",
        "texto": (
            "Voc√™ j√° se perguntou alguma vez como seria sua vida desfrutando de total liberdade de tempo e ao mesmo tempo gerando renda?\n\n"
            "Voc√™ j√° teve necessidade de ter 2 ou at√© 3 empregos porque o dinheiro n√£o basta? ü•¥ Voc√™ est√° procurando uma renda extra ou algo que lhe d√™ mais tempo para voc√™ e sua fam√≠lia? Se sim, esta oportunidade √© para voc√™.ü§ó\n\n"
            "‚û°Ô∏è Convidamos voc√™ a ouvir essa grande oportunidade de neg√≥cio. Sem a necessidade de ter n√≠vel acad√™mico ou ser profissional. Est√° ao alcance de todos e √© tamb√©m um projeto com alcance global üåé. ü§©\n\n"
            "Separe seu espa√ßo na sua agenda.üóìÔ∏è\n"
            "‚ú® *Reuni√£o presencial nesta*\n"
            "Quarta-feiraüë©üèº‚Äçüíª\n"
            "Data: 06/11/2025.\n"
            "Hor√°rio: 20 horas.\n"
            "Local: Avenida Capit√£o Ene Garcez, 427. Centro. Boa Vista, Roraima.\n\n"
            "üì∏ Estamos esperando por voc√™! ü§ó"
        ),
        "data_hora": datetime(2025, 11, 6, 20, 0),
        "duracao": timedelta(hours=1),
        "status": "on", # "on" para ativo, "off" para desativado
    },
    "Reuni√£o Central Brasil - Online": {
        "file_id_foto": "BQACAgEAAxkBAAIzZmdF6ntI9WJwkFJi6WD4X0oI_JpaAAImBAAC_9UxRsstOs1Mug4fNgQ",
        "file_id_video": "BAACAgEAAxkBAAIzaGdF6zJj9SZQKzm2hYxarqRYJNoCAAInBAAC_9UxRizlsRA8gE2sNgQ",
        "texto": (
            "Voc√™ j√° se perguntou alguma vez como seria sua vida desfrutando de total liberdade de tempo e ao mesmo tempo gerando renda?\n\n"
            "Voc√™ j√° teve necessidade de ter 2 ou at√© 3 empregos porque o dinheiro n√£o basta? ü•¥ Voc√™ est√° procurando uma renda extra ou algo que lhe d√™ mais tempo para voc√™ e sua fam√≠lia? Se sim, esta oportunidade √© para voc√™.ü§ó\n\n"
            "‚û°Ô∏è Convidamos voc√™ a ouvir essa grande oportunidade de neg√≥cio. Sem a necessidade de ter n√≠vel acad√™mico ou ser profissional. Est√° ao alcance de todos e √© tamb√©m um projeto com alcance global üåé. ü§©\n\n"
            "Separe seu espa√ßo na sua agenda.üóìÔ∏è\n"
            "‚ú® Reuni√£o virtual pelo zoom üë©üèº‚Äçüíª\n"
            "Data: ter√ßa-feira, 26 de novembro de 2025 √†s 20:00 hor√°rio de Bras√≠lia\n\n"
            "Basta clicar no link para acessar ü§©üëáüèª\n\n"
            "üì≤ Link para reuni√£o via Zoom\n"
            "https://us02web.zoom.us/j/88066207020?pwd=S0tKUEdYMkNiUmNydkJrM3dsMEhwQT09b\n\n"
            "üì∏ Estamos esperando por voc√™! ü§ó"
        ),
        "data_hora": datetime(2025, 11, 26, 20, 0),
        "duracao": timedelta(hours=1),
        "status": "on", # "on" para ativo, "off" para desativado
    }
}

def gerar_link_google_calendar(evento_nome: str, data_hora: datetime, duracao: timedelta, location: str) -> str:
    """Gera um link do Google Calendar para o evento."""
    start_time_str = data_hora.strftime("%Y%m%dT%H%M%SZ")
    end_time_str = (data_hora + duracao).strftime("%Y%m%dT%H%M%SZ")
    google_calendar_url = (
        f"https://www.google.com/calendar/render?action=TEMPLATE&text={quote(evento_nome)}&"
        f"dates={start_time_str}/{end_time_str}&"
        f"details=Participe+da+reuni√£o.&"
        f"location={quote(location)}"
    )
    return google_calendar_url

@group_member_required
async def escolher_local_evento(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envia o menu inicial para escolha do evento."""
    keyboard = [
        [InlineKeyboardButton(nome, callback_data=f"evento_{nome}")]
        for nome, detalhes in EVENTOS.items() if detalhes.get("status") == "on"
    ]
    if not keyboard:
        await update.message.reply_text("Nenhum evento programado no momento. Fique atento para mais informa√ß√µes em breve!")
        return

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üåç Escolha um evento para ver mais detalhes:",
        reply_markup=reply_markup
    )

@group_member_required
async def enviar_evento(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Lida com o callback do bot√£o e envia os detalhes do evento."""
    query = update.callback_query
    if not (query and query.data): return
    
    await query.answer()
    
    evento_nome = query.data.replace("evento_", "")
    evento = EVENTOS.get(evento_nome)

    if not evento:
        await query.message.reply_text("‚ö†Ô∏è Evento n√£o encontrado ou n√£o est√° mais ativo.")
        return

    # Extrai o local do texto do evento para o link do calend√°rio
    location_info = "Online via Zoom"
    if "Local:" in evento["texto"]:
        location_info = evento["texto"].split("Local:")[1].split("\n\n")[0].strip()

    google_calendar_url = gerar_link_google_calendar(evento_nome, evento["data_hora"], evento["duracao"], location_info)

    try:
        if evento.get("file_id_foto"):
            await context.bot.send_document(
                chat_id=query.message.chat_id,
                document=evento["file_id_foto"],
                caption=evento["texto"]
            )

        if evento.get("file_id_video"):
            await context.bot.send_video(
                chat_id=query.message.chat_id,
                video=evento["file_id_video"]
            )

        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("üóìÔ∏è Adicionar ao Google Calendar", url=google_calendar_url)]]
        )
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="Adicione o evento √† sua agenda:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Erro ao enviar detalhes do evento '{evento_nome}': {e}")
        await query.message.reply_text("‚ö†Ô∏è Ocorreu um erro ao buscar os detalhes do evento.")

