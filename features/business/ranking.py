# NOME DO ARQUIVO: features/business/ranking.py
# REFACTOR: Gerencia a l√≥gica para exibir o ranking de posi√ß√µes e seus detalhes.

import locale
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, error
from telegram.ext import ContextTypes
from .ranking_data import POSITIONS # CORRE√á√ÉO: Importa do arquivo de dados correto.

def manual_format_currency(value):
    """Formata√ß√£o manual de moeda caso o locale falhe."""
    try:
        return f"R$ {value:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
    except (TypeError, ValueError):
        return str(value)

def format_currency(value):
    """Tenta formatar usando o locale, sen√£o usa o m√©todo manual."""
    if not isinstance(value, (int, float)):
        return format_value(value)
    try:
        # Tenta usar o locale pt_BR, se configurado
        return locale.currency(value, grouping=True, symbol='R$')
    except (locale.Error, TypeError, ValueError):
        # Fallback para formata√ß√£o manual
        return manual_format_currency(value)

def format_value(value, prefix="", suffix=""):
    """Formata valores num√©ricos, None ou outros para exibi√ß√£o."""
    if value is None:
        return "N/A"
    if isinstance(value, (int, float)):
        try:
            # Tenta usar o locale para formata√ß√£o de n√∫mero
            return f"{prefix}{value:n}{suffix}".replace(",", "X").replace(".", ",").replace("X", ".")
        except (locale.Error, ValueError):
            # Fallback para formata√ß√£o sem locale
             return f"{prefix}{value}{suffix}"
    return str(value)

async def mostrar_ranking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Exibe o menu com todas as posi√ß√µes do ranking."""
    if not update.message:
        return
        
    keyboard = [
        [InlineKeyboardButton(f"{details.get('emoji', '‚ñ´Ô∏è')} {name}", callback_data=f"detalhes_ranking_{name}")]
        for name, details in POSITIONS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üíé *Ranking de Posi√ß√µes*\n\nSelecione uma posi√ß√£o para ver os detalhes no seu privado.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def enviar_detalhes_ranking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envia os detalhes de uma posi√ß√£o espec√≠fica no privado do usu√°rio."""
    query = update.callback_query
    if not query or not query.from_user or not context.bot:
        return

    user_id = query.from_user.id
    bot_username = context.bot.username

    position_name = query.data.split("detalhes_ranking_")[1]
    position = POSITIONS.get(position_name)

    if not position:
        await query.answer("‚ùå Posi√ß√£o n√£o encontrada.", show_alert=True)
        return

    linhas_qualificadas_str = "N/A"
    if position.get('linhas_qualificadas'):
        linhas_list = [f"{item['quantidade']} {item['posicao']}" for item in position['linhas_qualificadas']]
        linhas_qualificadas_str = ", ".join(linhas_list)

    message = "\n".join([
        f"{position.get('emoji', '‚ñ´Ô∏è')} *{position_name}* - _{position.get('nivel_categoria', 'N/A')}_",
        "", "üìã *Requisitos:*",
        f"‚Ä¢ PV Mensal: *{format_value(position.get('pv_mensal'), suffix=' PV')}*",
        f"‚Ä¢ Inscritos Pessoais: *{format_value(position.get('inscritos_pessoais'))}*",
        f"‚Ä¢ LP nos 3 N√≠veis: *{format_value(position.get('lp_nos_3_niveis'), suffix=' LP')}*",
        f"‚Ä¢ Linhas Qualificadas: *{linhas_qualificadas_str}*",
        f"‚Ä¢ Volume Organizacional: *{format_value(position.get('vo_rede'), suffix=' VO')}*",
        "", "üí∞ *Ganhos e Benef√≠cios:*",
        f"‚Ä¢ M√©dia de Ganhos: *{format_currency(position.get('media_ganho'))}*",
        f"‚Ä¢ B√¥nus de Participa√ß√£o: *{format_currency(position.get('bonus_participacao'))}*",
        f"‚Ä¢ Viagens de Incentivo: *{'Sim ‚úÖ' if position.get('viagens_incentivo') else 'N√£o ‚ùå'}*",
        "", "üìå *Observa√ß√£o:*",
        f"_{position.get('observacao', 'Nenhuma.')}_"
    ])
    try:
        await context.bot.send_message(chat_id=user_id, text=message, parse_mode="Markdown")
        await query.answer("‚úÖ Detalhes enviados no seu privado!")
    except error.Forbidden:
        await query.answer(f"Inicie uma conversa comigo: t.me/{bot_username}", show_alert=True)

