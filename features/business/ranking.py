# NOME DO ARQUIVO: features/business/ranking.py
# REFACTOR: Gerencia a l√≥gica para exibir o ranking de posi√ß√µes e seus detalhes.

import locale
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, error
from telegram.ext import ContextTypes

# Importa o dicion√°rio de dados do arquivo irm√£o na mesma pasta.
from .ranking_data import POSITIONS

logger = logging.getLogger(__name__)

# --- Fun√ß√µes de Formata√ß√£o ---

def _format_currency(value: float | int | None) -> str:
    """
    Formata um valor num√©rico como moeda (R$).
    Tenta usar o locale 'pt_BR' para uma formata√ß√£o ideal. Se falhar (por exemplo,
    se o locale n√£o estiver instalado no servidor), usa um m√©todo manual como fallback.
    """
    if not isinstance(value, (int, float)):
        return _format_value(value)
    try:
        # Tenta usar o locale configurado em main.py
        return locale.currency(value, grouping=True, symbol='R$')
    except (locale.Error, TypeError, ValueError):
        # Fallback: Formata√ß√£o manual para o padr√£o brasileiro (ex: R$ 1.234,56)
        return f"R$ {value:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def _format_value(value, prefix: str = "", suffix: str = "") -> str:
    """Formata um valor gen√©rico para exibi√ß√£o, tratando None como 'N/A'."""
    if value is None:
        return "N/A"
    if isinstance(value, (int, float)):
        try:
            # Tenta usar formata√ß√£o de n√∫mero com separador de milhar do locale
            return f"{prefix}{value:n}{suffix}".replace(",", "X").replace(".", ",").replace("X", ".")
        except (locale.Error, ValueError):
            # Fallback sem locale
             return f"{prefix}{value:,}{suffix}"
    return str(value)

def _format_position_details(position_name: str, position_data: dict) -> str:
    """
    Cria a mensagem de texto formatada com os detalhes de uma posi√ß√£o.
    Isso separa a l√≥gica de apresenta√ß√£o da l√≥gica do handler.
    """
    # Formata a lista de linhas qualificadas de forma leg√≠vel
    linhas_qualificadas_str = "N/A"
    if position_data.get('linhas_qualificadas'):
        linhas_list = [f"{item['quantidade']} {item['posicao']}" for item in position_data['linhas_qualificadas']]
        linhas_qualificadas_str = ", ".join(linhas_list)

    # Constr√≥i a mensagem final usando f-strings e as fun√ß√µes de formata√ß√£o
    return "\n".join([
        f"{position_data.get('emoji', '‚ñ´Ô∏è')} *{position_name}* - _{position_data.get('nivel_categoria', 'N/A')}_",
        "", "üìã *Requisitos:*",
        f"‚Ä¢ PV Mensal: *{_format_value(position_data.get('pv_mensal'), suffix=' PV')}*",
        f"‚Ä¢ Inscritos Pessoais: *{_format_value(position_data.get('inscritos_pessoais'))}*",
        f"‚Ä¢ LP nos 3 N√≠veis: *{_format_value(position_data.get('lp_nos_3_niveis'), suffix=' LP')}*",
        f"‚Ä¢ Linhas Qualificadas: *{linhas_qualificadas_str}*",
        f"‚Ä¢ Volume Organizacional: *{_format_value(position_data.get('vo_rede'), suffix=' VO')}*",
        "", "üí∞ *Ganhos e Benef√≠cios:*",
        f"‚Ä¢ M√©dia de Ganhos: *{_format_currency(position_data.get('media_ganho'))}*",
        f"‚Ä¢ B√¥nus de Participa√ß√£o: *{_format_currency(position_data.get('bonus_participacao'))}*",
        f"‚Ä¢ Viagens de Incentivo: *{'Sim ‚úÖ' if position_data.get('viagens_incentivo') else 'N√£o ‚ùå'}*",
        "", "üìå *Observa√ß√£o:*",
        f"_{position_data.get('observacao', 'Nenhuma.')}_"
    ])

# --- Handlers ---

async def mostrar_ranking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler do comando /ranking.
    Exibe um menu com todas as posi√ß√µes do ranking para o usu√°rio selecionar.
    """
    if not update.message:
        return

    # Gera o teclado dinamicamente a partir do dicion√°rio POSITIONS
    keyboard = [
        [InlineKeyboardButton(f"{details.get('emoji', '‚ñ´Ô∏è')} {name}", callback_data=f"ranking_details_{name}")]
        for name, details in POSITIONS.items()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üíé *Ranking de Posi√ß√µes*\n\n"
        "Selecione uma posi√ß√£o para receber todos os detalhes no seu privado.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def ranking_details_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Lida com os callbacks do menu de ranking.
    Envia os detalhes de uma posi√ß√£o espec√≠fica no privado do usu√°rio.
    """
    query = update.callback_query
    if not query or not query.from_user or not context.bot:
        return

    # Extrai o nome da posi√ß√£o do callback_data. Ex: 'ranking_details_Diamond' -> 'Diamond'
    position_name = query.data.split("ranking_details_")[1]
    position_data = POSITIONS.get(position_name)

    if not position_data:
        await query.answer("‚ùå Posi√ß√£o n√£o encontrada. Por favor, tente novamente.", show_alert=True)
        return

    # Gera a mensagem formatada chamando a fun√ß√£o auxiliar
    message_text = _format_position_details(position_name, position_data)
    
    try:
        # Tenta enviar a mensagem para o chat privado do usu√°rio
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=message_text,
            parse_mode="Markdown"
        )
        await query.answer("‚úÖ Detalhes enviados no seu privado!")
    except error.Forbidden:
        # Erro cl√°ssico: o bot n√£o pode iniciar uma conversa.
        # Informa ao usu√°rio exatamente como resolver o problema.
        bot_username = context.bot.username
        await query.answer(
            f"Preciso que voc√™ me inicie no privado primeiro! Clique aqui: t.me/{bot_username}",
            show_alert=True
        )
    except Exception as e:
        logger.error(f"Erro inesperado ao enviar detalhes do ranking para {query.from_user.id}: {e}")
        await query.answer("Ocorreu um erro ao enviar os detalhes. Tente novamente.", show_alert=True)

# NOTA PARA INTEGRA√á√ÉO EM main.py:
# Este m√≥dulo exporta dois handlers que precisam ser registrados:
# 1. O comando para mostrar o menu.
# 2. O callback para lidar com os cliques nos bot√µes.
#
# Adicionar:
# from features.business import ranking
#
# Em register_command_handlers:
# "ranking": ranking.mostrar_ranking,
#
# Em register_callback_handlers:
# application.add_handler(CallbackQueryHandler(ranking.ranking_details_callback_handler, pattern='^ranking_details_'))