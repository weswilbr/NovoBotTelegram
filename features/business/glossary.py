# NOME DO ARQUIVO: features/business/glossary.py
# REFACTOR: Gerencia a exibi√ß√£o e o download do gloss√°rio de termos.

import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from telegram.error import TelegramError

from features.products.data import MEDIA
from utils.verification import group_member_required

logger = logging.getLogger(__name__)

# --- Dicion√°rio de Termos ---
# Manter os termos aqui torna o m√≥dulo autossuficiente e f√°cil de atualizar.
GLOSSARY_TERMS = {
    'upline': ('üîù Upline', '**üîù Upline:** A linha de Afiliados diretamente acima de voc√™.'),
    'matriculador': ('üë§ Matriculador', '**üë§ Matriculador:** A pessoa que apresentou a 4Life para voc√™ (pode ser tamb√©m o seu patrocinador).'),
    'patrocinador': ('üßë‚Äçüíº Patrocinador', '**üßë‚Äçüíº Patrocinador:** A pessoa em sua linha upline que est√° diretamente acima de voc√™.'),
    'volume_equipe': ('üìà Volume Equipe', '**üìà Volume Equipe:** O Volume Principal, mais os pedidos de sua linha frontal.'),
    'linha_frontal': ('üë• Linha Frontal', '**üë• Linha Frontal:** Seu primeiro n√≠vel de Clientes Preferenciais e Afiliados que voc√™ patrocinou.'),
    'volume_tres_niveis': ('üî¢ Volume Tr√™s N√≠veis', '**üî¢ Volume Tr√™s N√≠veis:** Composto pelo seu Volume Principal (PV) e o PV das pessoas em seus tr√™s primeiros n√≠veis.'),
    'clientes_varejo': ('üõí Clientes Varejo', '**üõí Clientes Varejo:** Clientes que compram os produtos da 4Life no pre√ßo de varejo.'),
    'clientes_preferenciais': ('üè∑Ô∏è Clientes Preferenciais', '**üè∑Ô∏è Clientes Preferenciais:** Clientes que se inscrevem para comprar produtos 4Life a pre√ßos de atacado.'),
    'downline': ('‚¨áÔ∏è Downline', '**‚¨áÔ∏è Downline:** A linha de Afiliados e Clientes Preferenciais que ficam diretamente abaixo de voc√™.'),
    'perna': ('üìä Perna', '**üìä Perna:** Uma parte de seus downlines que come√ßa com uma pessoa de sua linha frontal.'),
    'lp': ('üí∞ Life Points (LP)', '**üí∞ Life Points (LP):** Valor em pontos atribu√≠do a cada produto, usado para calcular comiss√µes.'),
    'pv': ('üè¶ Volume Principal (PV)', '**üè¶ Volume Principal (PV):** O total de LP dos produtos comprados por voc√™.'),
    'vo': ('üìä Volume Organizacional (VO)', '**üìä Volume Organizacional (VO):** Os LP de suas compras, clientes e todos em sua downline.'),
    'bonus_rapido': ('üí∏ B√¥nus R√°pido', '**üí∏ B√¥nus R√°pido:** Comiss√£o de 25% sobre o primeiro pedido de cada novo Cliente Preferencial.'),
    'programa_fidelidade': ('üéÅ Programa Fidelidade', '**üéÅ Programa Fidelidade:** Recompensa clientes mensais com 15% em Pontos de Fidelidade.'),
    'compressao': ('üîÑ Compress√£o', '**üîÑ Compress√£o:** Afiliados n√£o qualificados n√£o s√£o contados no c√°lculo de comiss√µes.'),
    'bonus_builder': ('üèÜ B√¥nus Builder', '**üèÜ B√¥nus Builder:** B√¥nus para incentivar Afiliados a inscrever e reter sua rede.')
}

def get_glossary_menu() -> InlineKeyboardMarkup:
    """Gera dinamicamente o teclado do gloss√°rio a partir do dicion√°rio de termos."""
    buttons = []
    row = []
    # Itera sobre os termos para criar os bot√µes
    for key, (label, _) in GLOSSARY_TERMS.items():
        row.append(InlineKeyboardButton(label, callback_data=f'glossary_showterm_{key}'))
        # Agrupa os bot√µes em linhas de 2
        if len(row) == 2:
            buttons.append(row)
            row = []
    # Adiciona a √∫ltima linha se ela tiver um n√∫mero √≠mpar de bot√µes
    if row:
        buttons.append(row)
    
    # Adiciona o bot√£o de download e o de fechar
    buttons.append([InlineKeyboardButton("üì• Baixar Gloss√°rio Completo (.pdf)", callback_data='glossary_download')])
    return InlineKeyboardMarkup(buttons)

async def _show_main_menu(update: Update) -> None:
    """Fun√ß√£o auxiliar para exibir ou editar para o menu principal do gloss√°rio."""
    text = "üìñ *Gloss√°rio de Termos*\n\nSelecione um termo para ver sua defini√ß√£o ou baixe o arquivo completo."
    keyboard = get_glossary_menu()
    
    # Se for uma callback (ex: vindo do bot√£o "Voltar"), edita a mensagem.
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
    # Se for um comando (/glossario), envia uma nova mensagem.
    else:
        await update.message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')

@group_member_required
async def glossario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler do comando /glossario. Exibe o menu principal."""
    await _show_main_menu(update)

async def _show_term_definition(query: Update.callback_query, term_key: str) -> None:
    """Exibe a defini√ß√£o de um termo espec√≠fico."""
    _, definition = GLOSSARY_TERMS.get(term_key, (None, None))
    if not definition:
        await query.edit_message_text("‚ö†Ô∏è Termo n√£o encontrado.")
        return

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üîô Voltar ao Gloss√°rio", callback_data='glossary_main')]])
    await query.edit_message_text(f"{definition}", reply_markup=keyboard, parse_mode='Markdown')

async def _download_glossary(query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envia o documento completo do gloss√°rio."""
    document_id = MEDIA.get('glossario', {}).get('documento')

    if not document_id:
        await query.answer("‚ö†Ô∏è Arquivo n√£o dispon√≠vel no momento.", show_alert=True)
        return

    try:
        await context.bot.send_document(chat_id=query.message.chat.id, document=document_id)
        # Edita a mensagem original para confirmar o envio e remover os bot√µes.
        await query.edit_message_text("‚úÖ Gloss√°rio enviado! Verifique o documento acima.", reply_markup=None)
    except TelegramError as e:
        logger.error(f"Erro ao enviar gloss√°rio (ID: {document_id}): {e}")
        await query.answer("‚ö†Ô∏è Ocorreu um erro ao enviar o arquivo. Tente novamente mais tarde.", show_alert=True)


async def glossary_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Roteador para todos os callbacks que come√ßam com 'glossary_'."""
    query = update.callback_query
    await query.answer()
    
    data = query.data

    if data.startswith('glossary_showterm_'):
        term_key = data.split('_', 2)[2]
        await _show_term_definition(query, term_key)
    elif data == 'glossary_download':
        await _download_glossary(query, context)
    elif data == 'glossary_main':
        await _show_main_menu(update)

# NOTA PARA INTEGRA√á√ÉO EM main.py:
# Adicionar:
# from features.business import glossary
# application.add_handler(CallbackQueryHandler(glossary.glossary_callback_handler, pattern='^glossary_'))