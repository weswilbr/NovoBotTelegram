# NOME DO ARQUIVO: features/business/glossary.py
# REFACTOR: Gerencia a exibi√ß√£o e o download do gloss√°rio de termos.

import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from telegram.error import BadRequest

from features.products.data import MEDIA  # Apenas MEDIA √© necess√°rio daqui
from utils.verification import group_member_required
from utils.anti_flood import check_flood

logger = logging.getLogger(__name__)

# Os termos do gloss√°rio foram movidos para este arquivo para torn√°-lo autossuficiente.
GLOSSARIO_TERMS = {
    'upline': '**üîù Upline:** A linha de Afiliados diretamente acima de voc√™.',
    'matriculador': '**üë§ Matriculador:** A pessoa que apresentou a 4Life para voc√™ (pode ser tamb√©m o seu patrocinador).',
    'patrocinador': '**üßë‚Äçüíº Patrocinador:** A pessoa em sua linha upline que est√° diretamente acima de voc√™ (pode ser tamb√©m a pessoa que fez sua inscri√ß√£o).',
    'volume_equipe': '**üìà Volume Equipe:** O Volume Principal, mais os pedidos de sua linha frontal de Clientes Preferenciais e Afiliados.',
    'linha_frontal': '**üë• Linha Frontal:** Seu primeiro n√≠vel de Clientes Preferenciais e Afiliados que voc√™ patrocinou.',
    'volume_tres_niveis': '**üî¢ Volume Tr√™s N√≠veis:** Composto pelo total de seu Volume Principal (PV) e o PV combinado das pessoas em seus tr√™s primeiros n√≠veis.',
    'clientes_varejo': '**üõí Clientes Varejo:** Clientes que compram os produtos da 4Life no pre√ßo de varejo.',
    'clientes_preferenciais': '**üè∑Ô∏è Clientes Preferenciais:** Clientes que se inscrevem para comprar produtos 4Life a pre√ßos de atacado.',
    'downline': '**‚¨áÔ∏è Downline:** A linha de Afiliados e Clientes Preferenciais que ficam diretamente abaixo de voc√™.',
    'perna': '**üìä Perna:** Uma parte de seus downlines que come√ßa com uma pessoa de sua linha frontal e continua abaixo daquele Afiliado.',
    'lp': '**üí∞ Life Points (LP):** Valor em pontos atribu√≠do a cada produto da 4Life, usado para calcular comiss√µes.',
    'pv': '**üè¶ Volume Principal (PV):** O total de LP dos produtos comprados por voc√™, para consumo pr√≥prio ou para venda a varejo.',
    'vo': '**üìä Volume Organizacional (VO):** Os LP de suas compras pessoais, clientes e todos os Afiliados e clientes em sua downline.',
    'bonus_rapido': '**üí∏ B√¥nus R√°pido:** Comiss√£o de 25% sobre o primeiro pedido de cada novo Cliente Preferencial inscrito pessoalmente.',
    'programa_fidelidade': '**üéÅ Programa Fidelidade:** Recompensa Afiliados e Clientes Preferenciais que compram mensalmente com 15% em Pontos de Fidelidade.',
    'compressao': '**üîÑ Compress√£o:** Afiliados que n√£o se qualificam n√£o s√£o contados no c√°lculo de comiss√µes.',
    'bonus_builder': '**üèÜ B√¥nus Builder:** B√¥nus para incentivar Afiliados a inscrever novos clientes e reter sua rede.'
}


@group_member_required
async def glossario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Exibe o menu principal do gloss√°rio."""
    keyboard = [
        [InlineKeyboardButton("üîù Upline", callback_data='glossario_upline'), InlineKeyboardButton("üë§ Matriculador", callback_data='glossario_matriculador')],
        [InlineKeyboardButton("üßë‚Äçüíº Patrocinador", callback_data='glossario_patrocinador'), InlineKeyboardButton("üìà Volume Equipe", callback_data='glossario_volume_equipe')],
        [InlineKeyboardButton("üë• Linha Frontal", callback_data='glossario_linha_frontal'), InlineKeyboardButton("üî¢ Volume Tr√™s N√≠veis", callback_data='glossario_volume_tres_niveis')],
        [InlineKeyboardButton("üõí Clientes Varejo", callback_data='glossario_clientes_varejo'), InlineKeyboardButton("üè∑Ô∏è Clientes Preferenciais", callback_data='glossario_clientes_preferenciais')],
        [InlineKeyboardButton("‚¨áÔ∏è Downline", callback_data='glossario_downline'), InlineKeyboardButton("üìä Perna", callback_data='glossario_perna')],
        [InlineKeyboardButton("üí∞ Life Points (LP)", callback_data='glossario_lp'), InlineKeyboardButton("üè¶ Volume Principal (PV)", callback_data='glossario_pv')],
        [InlineKeyboardButton("üìä Volume Organizacional (VO)", callback_data='glossario_vo'), InlineKeyboardButton("üí∏ B√¥nus R√°pido", callback_data='glossario_bonus_rapido')],
        [InlineKeyboardButton("üéÅ Programa Fidelidade", callback_data='glossario_programa_fidelidade'), InlineKeyboardButton("üîÑ Compress√£o", callback_data='glossario_compressao')],
        [InlineKeyboardButton("üèÜ B√¥nus Builder", callback_data='glossario_bonus_builder')],
        [InlineKeyboardButton("üì• Baixar Gloss√°rio Completo", callback_data='baixar_glossario')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "Escolha um termo do gloss√°rio ou baixe o gloss√°rio completo:"
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')


@group_member_required
async def callback_glossario(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Lida com as sele√ß√µes do menu do gloss√°rio."""
    query = update.callback_query
    if not query or not query.data: return

    if not await check_flood(update): return
    
    await query.answer()
    callback_data = query.data
    
    termo_key = callback_data.replace('glossario_', '')

    if termo_key in GLOSSARIO_TERMS:
        keyboard = [[InlineKeyboardButton("üîô Voltar ao Gloss√°rio", callback_data='glossario')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"{GLOSSARIO_TERMS[termo_key]}\n\nEscolha outro termo ou volte.",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif callback_data == 'baixar_glossario':
        documento_id = MEDIA.get('glossario', {}).get('documento')
        if documento_id:
            await context.bot.send_document(chat_id=query.message.chat.id, document=documento_id)
        else:
            await query.message.reply_text("‚ö†Ô∏è Arquivo do gloss√°rio n√£o encontrado.")
    elif callback_data == 'glossario':
        await glossario(update, context)

