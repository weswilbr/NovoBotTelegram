# NOME DO ARQUIVO: features/business/brochures.py
# REFACTOR: Handler para o comando /folheteria, exibindo cat√°logos e panfletos.

import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes
from telegram.error import TelegramError

# Assumindo que este decorator verifica se o usu√°rio est√° no grupo principal.
from utils.verification import group_member_required 
# Centralize a importa√ß√£o de dados de m√≠dia.
from features.products.data import MEDIA

logger = logging.getLogger(__name__)

# --- Mapeamento de Documentos ---
# Centralizar a busca dos IDs em um dicion√°rio torna o c√≥digo mais limpo
# e f√°cil de adicionar novos documentos no futuro.
BROCHURE_DOCUMENTS = {
    'panfletos': MEDIA.get('folheteria', {}).get('panfletoprodutosnovo'),
    'catalogo': MEDIA.get('catalogoprodutos', {}).get('documento'),
    'enquete': MEDIA.get('enqueteimunidade', {}).get('id')
}

def get_brochures_menu() -> InlineKeyboardMarkup:
    """Cria e retorna o menu principal de folheteria."""
    # Usar um prefixo consistente (ex: 'brochure_') facilita o roteamento dos callbacks.
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∞ Ver Panfletos", callback_data='brochure_panfletos')],
        [InlineKeyboardButton("üìî Cat√°logo 4Life", callback_data='brochure_catalogo')],
        [InlineKeyboardButton("üìä Enquete Imunidade", callback_data='brochure_enquete')],
    ])

@group_member_required
async def folheteria(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler do comando /folheteria.
    Exibe um menu com op√ß√µes de materiais para o usu√°rio.
    """
    await update.message.reply_text(
        "üëã Bem-vindo √† se√ß√£o de materiais!\n\n"
        "Escolha uma das op√ß√µes abaixo para receber o documento:",
        reply_markup=get_brochures_menu()
    )

async def brochures_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Lida com os callbacks dos bot√µes do menu de folheteria.
    Este handler deve ser registrado em main.py com o pattern='^brochure_'.
    """
    query = update.callback_query
    # √â uma boa pr√°tica sempre responder ao callback para remover o √≠cone de "carregando".
    await query.answer()

    # Extrai a a√ß√£o do callback_data. Ex: 'brochure_panfletos' -> 'panfletos'
    action = query.data.split('_', 1)[1]

    doc_id = BROCHURE_DOCUMENTS.get(action)

    if not doc_id:
        logger.warning(f"ID de documento n√£o encontrado para a a√ß√£o de folheteria: '{action}'")
        await query.edit_message_text(
            "‚ö†Ô∏è Desculpe, este material n√£o est√° dispon√≠vel no momento. Tente novamente mais tarde."
        )
        return

    try:
        # Envia o documento para o usu√°rio.
        await context.bot.send_document(
            chat_id=query.message.chat.id,
            document=doc_id,
            caption=f"Aqui est√° o material sobre '{action.capitalize()}' que voc√™ solicitou!"
        )
        
        # Edita a mensagem original para remover os bot√µes e confirmar o envio.
        # Isso previne que o usu√°rio clique nos bot√µes novamente.
        await query.edit_message_text(
            text="‚úÖ Documento enviado com sucesso! Verifique acima.",
            reply_markup=None # Remove o teclado inline
        )

    except TelegramError as e:
        logger.error(f"Erro ao enviar documento de folheteria (ID: {doc_id}): {e}")
        await query.edit_message_text(
            "‚ö†Ô∏è Ocorreu um erro ao tentar enviar o documento. A equipe de administra√ß√£o j√° foi notificada."
        )

# NOTA PARA INTEGRA√á√ÉO EM main.py:
# O handler 'brochures_callback_handler' deve ser registrado junto aos outros CallbackQueryHandlers.
# Exemplo de como adicion√°-lo:
# from features.business.brochures import brochures_callback_handler
# application.add_handler(CallbackQueryHandler(brochures_callback_handler, pattern='^brochure_'))